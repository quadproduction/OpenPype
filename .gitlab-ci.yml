# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

stages:
  - build
  - test
  - deploy


.build-centos:
  stage: build
  tags: 
    - shell
    - centos
  script:
    # Add python from soft prod 
    - export PATH="/prod/softprod/apps/python/3.7.9/linux/bin:$PATH"
    - export PYTHONUSERBASE=$(mktemp -d -t ci-XXXXXXXXXX -p ./)
    - export PYTHONPATH=./pythonpath/
    - mkdir $PYTHONPATH
    # Create virtual environment in ./venv
    - ./tools/create_env.sh
    # Get PySide2, ffmpeg, oiio and other tools needed
    - ./tools/fetch_thirdparty_libs.sh
    # build pype executables in .\build\
    - .poetry/bin/poetry install --no-root
    - .poetry/bin/poetry run python -c "import sys, pprint; pprint.pprint(sys.path)"

    - ./tools/build.sh
    # - tar cvzfp ./build.tar.gz ./build
  # cache:
  #   key: "$CI_COMMIT_REF_SLUG"
  #   paths:
  #     - ./build

  # artifacts:
  #   paths:
  #     - ./build.tar.gz
  #   expire_in: 1 day

build-centos-on-tags:
  extends: .build-centos
  only: [tags]

build-centos-manual:
  extends: .build-centos
  when: manual

build-windows:
  stage: build
  only:
    - tags
  tags: 
    - shell
    - windows
  script:
    - $env:PATH="c:\prod\softprod\apps\python\3.7.9\windows;%PATH%"
    - python -v
    - .\tools\create_env.ps1
    - .\tools\fetch_thirdparty_libs.ps1
    - .\tools\build.ps1

deploy-centos-staged:
  extends: build-centos-on-tags
  stage: deploy
  environment:
    name: staging
  only:
    - tags
  needs: [build-centos-on-tags]
  tags: 
    - shell
    - centos
  script:
    # - tar xzfp ./build.tar.gz
    - ls ./build/
    - version=$(git describe --match v?.* --all --always | sed -e 's/tags\///g')
    - mkdir -p /prod/softprod/apps/openpype/$version/linux/
    - rsync -rptl ./build/exe.linux-x86_64-3.7/ /prod/softprod/apps/openpype/$version/linux/

deploy-centos-prod:
  when: manual
  stage: deploy
  environment:
    name: production
  only:
    - tags
  needs: [deploy-centos-staged]
  tags: 
    - shell
    - centos
  script:
    - pwd
