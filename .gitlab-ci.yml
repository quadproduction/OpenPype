stages:
  - build
  - test
  - deploy
  - staging
  - production

variables:
  PYTHON_VERSION: 3.9.6
  GIT_SUBMODULE_STRATEGY: recursive
  OP_APP_DIR: /prod/softprod/apps/openpype
  OP_STAGING_PATH: $OP_APP_DIR/staging
  OP_PROD_PATH: $OP_APP_DIR/latest
  OP_VERSION_PATH: $OP_APP_DIR/VERSION_NOT_SET
  OP_REPOSITORY: $OP_APP_DIR/REPOSITORY
  DEADLINE_CUSTOM: /prod/softprod/apps/deadline/repo/

workflow:
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_TAG != ""
      variables:
        OP_VERSION: "$CI_COMMIT_TAG"
        OP_VERSION_PATH: "$OP_APP_DIR/$CI_COMMIT_TAG"
    - if: $CI_COMMIT_TAG == null || $CI_COMMIT_TAG ==""
      variables:
        OP_VERSION: "$CI_COMMIT_BRANCH"
        OP_VERSION_PATH: "$OP_APP_DIR/$CI_COMMIT_BRANCH"
    - when: always

.build-centos:
  stage: build
  tags: [docker]
  image: centos:7
  before_script:
    # Update/Install package for python build with pyenv
    - yum update -y -q
    - yum groupinstall -y -q "Development Tools"
    - yum install -y -q zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel openssl-devel xz xz-devel libffi-devel findutils nfs-utils curl which

    # install secure Files (beta)
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash

    # mount softprod
    - mkdir -p /prod/softprod
    - mount -t nfs -o nolock,vers=3 fs301.prs.vfx.int:/mnt/fs301/fs301/softprod /prod/softprod

    # install pyenv
    - git clone https://github.com/pyenv/pyenv.git ~/.pyenv
    - echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
    - echo 'command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
    - echo 'eval "$(pyenv init -)"' >> ~/.bashrc
    - source ~/.bashrc

    # install python
    - pyenv install $PYTHON_VERSION
    - pyenv global $PYTHON_VERSION

    # install poetry
    - export POETRY_HOME="$openpype_root/.poetry"
    - curl -sSL https://install.python-poetry.org | python3 -

    # Add Wizz google drive credentials
    - cp .secure_files/openpype-345606-59da7749e96d.json openpype/modules/sync_server/providers/resources/wizz_gdrive.json
    
    # Create virtual environment in ./venv
    - $openpype_root/.poetry/bin/poetry -q update # only to have less verbosity with the next line
    - ./tools/create_env.sh
    
    # Get PySide2, ffmpeg, oiio and other tools needed
    - ./tools/fetch_thirdparty_libs.sh

.build-windows:
  stage: build
  tags: [docker]
  image: microsoft.com/dotnet:latest
  artifacts:
    paths:
      - .\build\OpenPype-${OP_VERSION}-install.exe
  before_script:
    - powershell -Command "Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))"
    - refreshenv
    - choco install python --version=3.9.6 -y 
  script:
    - echo "Build then copy to $env:OP_VERSION_PATH"
    # Add python 3.7.9 from softprod
    - $env:PATH="c:\prod\softprod\apps\python\3.7.9\windows\;"+$env:PATH
    # Setup git from softprod and remove git ssl verification
    - $env:PATH="c:\prod\softprod\apps\git-bash\latest\windows\cmd\;"+$env:PATH
    # Add InnoSetup in PATH
    - $env:PATH="C:\Program Files (x86)\Inno Setup 6\;"+$env:PATH
    - git config --global http.sslVerify false
    # Create virtual environment in ./venv
    - .\tools\create_env.ps1
    # Get PySide2, ffmpeg, oiio and other tools needed
    - .\tools\fetch_thirdparty_libs.ps1
    # Build pype executables in ./build
    - .\tools\build.ps1
    # Copy to softprod
    - echo "Copy to $OP_VERSION_PATH\windows"
    - Copy-Item -Force -Recurse .\build\exe.win-amd64-3.7 $env:OP_VERSION_PATH\windows
    # Build exe
    - .\tools\build_win_installer.ps1

build-centos-minor:
  extends: .build-centos
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
      when: always
    - if: $CI_PIPELINE_SOURCE == "push"
      when: manual
  script:
    - echo "Build OP then copy to $OP_REPOSITORY"
    # Build pype executables in ./build
    - ./tools/build.sh
    # Copy build in softprod
    - mkdir -p $OP_VERSION_PATH/linux
    # Copy to softprod
    - echo "Copy to $OP_VERSION_PATH/linux/"
    - rsync -rptl ./build/exe.linux-x86_64-3.9/ $OP_VERSION_PATH/linux/

build-centos-patch:
  extends: .build-centos
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+\.quad'
      when: always
    - if: $CI_PIPELINE_SOURCE == "push"
      when: manual
  script:
    # Set OpenPype version
    - sed -i 's/__version__ = .*/__version__ = "'"$OP_VERSION"'"/' openpype/version.py
    # build zip patch
    - echo "Build ZIP then copy to $OP_REPOSITORY"
    - tools/create_zip.sh --path $OP_REPOSITORY

build-centos-mr:
  extends: .build-centos
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
    - if: $CI_PIPELINE_SOURCE == "push"
      when: manual
  script:
    # Set OpenPype version
    - export CUR_VERSION=$(grep -oP '(?<=__version__ = ")[^"]*' openpype/version.py )
    - if [ "$OP_VERSION" = "$CI_COMMIT_BRANCH" ]; then export OP_VERSION="$CUR_VERSION-MR+$CI_COMMIT_BRANCH"; fi
    - sed -i 's/__version__ = .*/__version__ = "'"$OP_VERSION"'"/' openpype/version.py
    # build zip patch
    - echo "Build ZIP then copy to $OP_REPOSITORY"
    - tools/create_zip.sh --path $OP_REPOSITORY

build-windows-minor:
  extends: .build-windows
  rules:
    - if: $CI_COMMIT_TAG
      when: always

build-windows-manual:
  extends: .build-windows
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "push"
      when: manual

.deploy-staged:
  stage: staging
  needs: [build-windows-minor, build-centos-minor]
  rules:
    - if: $CI_COMMIT_TAG
      when: always
  tags: [shell, centos]
  script:
    - echo "Set staging link $OP_VERSION/ to $OP_VERSION_PATH"
    - ln -sfn $OP_VERSION/ $OP_STAGING_PATH

deploy-staged-minor:
  extends: .deploy-staged
  needs: [ {job: build-centos-minor, optional: false }, {job: build-windows-minor, optional: false } ]
  rules:
    - if: $CI_COMMIT_TAG

deploy-staged-manual:
  extends: .deploy-staged
  needs: [ {job: build-centos-patch, optional: true }, {job: build-windows-manual, optional: true } ]
  rules:
    - if: $CI_COMMIT_BRANCH == "cicd"

deploy-prod:
  when: manual
  stage: production
  needs: [{job: deploy-staged-minor, optional: true }, {job: deploy-staged-manual, optional: true }]
  tags: [shell, centos]
  script:
    - echo "Set prod link $OP_VERSION/ to $OP_PROD_PATH"
    - ln -sfn $OP_VERSION/ $OP_PROD_PATH

deploy-deadline:
  stage: production
  needs: [deploy-prod]
  tags: [shell, centos]
  script:
    - echo "Deadline plugins $OP_PROD_PATH/linux/openpype/modules/deadline/repository/custom to deadline directory $DEADLINE_CUSTOM"
    - cp -a $OP_PROD_PATH/linux/openpype/modules/deadline/repository/custom $DEADLINE_CUSTOM

# deploy-ftrack:
#   stage: build
#   tags: [shell, centos]
#   script:
#     - docker info
